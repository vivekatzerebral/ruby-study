class Array
  alias_method :original_brackets, :[]

  def [](index)
    return original_brackets(index - 1) if index.is_a?(Integer) && index > 0
    original_brackets(index)
  end
end

def copy(b, c, j, n, k)
  for i in j..n
    c[k] = b[i]
    k += 1
  end
end

def shortmerge(a, b, c, m, j, k)
  i = 1
  while i <= m
    if a[i] <= b[j]
      c[k] = a[i]
      i += 1
    else
      c[k] = b[j]
      j += 1
    end
    k += 1
  end
end

def mergecopy(a, b, c, m, n)
  i = 1
  j = 1
  k = 1

  if a[m] <= b[i]
    copy(a, c, i, m, k)
    copy(b, c, j, n, k)
  else
    shortmerge(a, b, c, m, j, k)
    copy(b, c, j, n, k)
  end
end

def merge(a, b, c, m, n)
  if a[m] <= b[n]
    mergecopy(a, b, c, m, n)
  else
    mergecopy(b, a, c, n, m)
  end
end

#establish two array of length 7 and 10 respectively
a = (0..7).to_a.map{|x| rand(1..100)}.sort
b = (0..10).to_a.map{|x| rand(1..100)}.sort

c = []

#call the function
merge(a, b, c, a.length, b.length)

puts "a=#{a.inspect}"
puts "b=#{b.inspect}"
puts "c=#{c.inspect}"
